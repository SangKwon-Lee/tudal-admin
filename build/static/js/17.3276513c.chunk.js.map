{"version":3,"sources":["pages/dashboard/HiddenboxViewer.tsx"],"names":["HiddenboxViewer","useIsMountedRef","settings","useSettings","useState","hiddenbox","setHiddenbox","hiddenboxId","useParams","useEffect","gtm","push","event","getHiddenbox","a","cmsServer","get","CMS_TOKEN","response","data","console","error","sx","backgroundColor","minHeight","py","maxWidth","compact"],"mappings":"kSA+EeA,UA/Ca,WACLC,cAArB,IACQC,EAAaC,cAAbD,SACR,EAAkCE,mBAA2B,MAA7D,mBAAOC,EAAP,KAAkBC,EAAlB,KACQC,EAAgBC,cAAhBD,YAERE,qBAAU,WACRC,IAAIC,KAAK,CAAEC,MAAO,gBACjB,IAEH,IAAMC,EAAY,uCAAG,4BAAAC,EAAA,+EAEMC,IAAUC,IAAV,uBAAyCT,EAAzC,kBAA8DU,MAFpE,OAEXC,EAFW,OAGjBZ,EAAaY,EAASC,MAHL,gDAKjBC,QAAQC,MAAR,MALiB,yDAAH,qDAalB,OAJAZ,qBAAU,WACRI,MACC,IAEER,EAKH,qCACE,cAAC,IAAD,UACE,gFAEF,cAAC,IAAD,CACEiB,GAAI,CACFC,gBAAiB,QACjBC,UAAW,OACXC,GAAI,GAJR,SAOE,cAAC,IAAD,CAAWC,WAAUxB,EAASyB,SAAU,KAAxC,SACE,cAAC,IAAD,CAAwBtB,UAAWA,WAhBlC","file":"static/js/17.3276513c.chunk.js","sourcesContent":["import { useCallback, useState, useEffect } from 'react';\nimport type { FC, ChangeEvent } from 'react';\nimport { Link as RouterLink, useParams } from 'react-router-dom';\nimport { Helmet } from 'react-helmet-async';\nimport {\n  Box,\n  Breadcrumbs,\n  Button,\n  Container,\n  Divider,\n  Grid,\n  Link,\n  Tab,\n  Tabs,\n  Typography\n} from '@material-ui/core';\nimport {\n  HiddenboxProductViewer,\n} from '../../components/dashboard/hiddenbox';\nimport useIsMountedRef from '../../hooks/useIsMountedRef';\nimport ChevronRightIcon from '../../icons/ChevronRight';\nimport PencilAltIcon from '../../icons/PencilAlt';\nimport gtm from '../../lib/gtm';\nimport type { Hiddenbox } from '../../types/hiddenbox';\nimport { cmsServer, CMS_TOKEN } from '../../lib/axios';\nimport useSettings from '../../hooks/useSettings';\n\nconst tabs = [\n  { label: '상품내용', value: 'details' },\n  { label: '구매내역', value: 'payments' },\n];\n\nconst HiddenboxViewer: FC = () => {\n  const isMountedRef = useIsMountedRef();\n  const { settings } = useSettings();\n  const [hiddenbox, setHiddenbox] = useState<Hiddenbox | null>(null);\n  const { hiddenboxId } = useParams();\n\n  useEffect(() => {\n    gtm.push({ event: 'page_view' });\n  }, []);\n\n  const getHiddenbox = async () => {\n    try {\n      const response = await cmsServer.get<Hiddenbox>(`/hiddenboxes/${hiddenboxId}?token=${CMS_TOKEN}`);\n      setHiddenbox(response.data);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    getHiddenbox();\n  }, []);\n\n  if (!hiddenbox) {\n    return null;\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>Dashboard: Hiddenbox Viewer | TUDAL Admin</title>\n      </Helmet>\n      <Box\n        sx={{\n          backgroundColor: 'white',\n          minHeight: '100%',\n          py: 3\n        }}\n      >\n        <Container maxWidth={settings.compact ? 'xl' : false}>\n          <HiddenboxProductViewer hiddenbox={hiddenbox} />\n        </Container>\n      </Box>\n    </>\n  );\n};\n\nexport default HiddenboxViewer;\n"],"sourceRoot":""}